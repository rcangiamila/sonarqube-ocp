apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  labels:
    name: sonarqube
  annotations:
    description: The SonarQube OpenShift template
    tags: instant-app,sonarqube
  name: sonarqube
message: "Login to SonarQube with the default admin user: admin/admin"
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    name: ${DATABASE_SERVICE_NAME}
  stringData:
    database-name: ${POSTGRESQL_DATABASE}
    database-password: ${POSTGRESQL_PASSWORD}
    database-user: ${POSTGRESQL_USER}
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    name: ${SONARQUBE_SERVICE_NAME}
  spec:
    port:
     targetPort: 9000-tcp 
    to:
      kind: Service
      name: ${SONARQUBE_SERVICE_NAME}
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"postgresql","namespace":"","kind":"Service"}]'
    name: ${SONARQUBE_SERVICE_NAME}
  spec:
    ports:
    - name: 9000-tcp
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      name: ${SONARQUBE_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: ${DATABASE_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${SONARQUBE_SERVICE_NAME}-data
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${SONARQUBE_VOLUME_CAPACITY}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      application: ${SONARQUBE_SERVICE_NAME}
    name: ${SONARQUBE_SERVICE_NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: ${SONARQUBE_SERVICE_NAME}
      appName: ${SONARQUBE_SERVICE_NAME}
    name: ${SONARQUBE_SERVICE_NAME}
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: ${SONARQUBE_SERVICE_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: /
      git:
        uri: https://github.com/rcangiamila/sonarqube-ocp.git
      type: Git
    strategy:
      dockerStrategy:
        dockerfilePath: Dockerfile
        env:
        - name: SONAR_PLUGINS_LIST
          value: ${SONAR_PLUGINS_LIST}
      type: Docker
    triggers:
    - github:
        secret: tu5UyJNNhAyxXYrcnDTZ
      type: GitHub
    - generic:
        secret: xhUU0WVDG3eA2Yu89zGe
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${SONARQUBE_SERVICE_NAME}
      appName: ${SONARQUBE_SERVICE_NAME}
      name: ${SONARQUBE_SERVICE_NAME}
    name: ${SONARQUBE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      app: ${SONARQUBE_SERVICE_NAME}
      deploymentconfig: ${SONARQUBE_SERVICE_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${SONARQUBE_SERVICE_NAME}
          deploymentconfig: ${SONARQUBE_SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: SONAR_PLUGIN_LIST
            value: ${SONAR_PLUGIN_LIST}
          - name: SONARQUBE_WEB_JVM_OPTS
            value: ${SONARQUBE_WEB_JVM_OPTS}
          - name: SONARQUBE_JDBC_USERNAME
            value: ${POSTGRESQL_USER}
          - name: SONARQUBE_JDBC_PASSWORD
            value: ${POSTGRESQL_PASSWORD}
          - name: SONARQUBE_JDBC_URL
            value: jdbc:${DATABASE_SERVICE_NAME}://${DATABASE_SERVICE_NAME}:5432/${POSTGRESQL_DATABASE}
          - name: SONARQUBE_BUILDBREAKER_MAX_ATTEMPTS
            value: ${SONARQUBE_BUILDBREAKER_MAX_ATTEMPTS}
          - name: SONARQUBE_BUILDBREAKER_INTERVAL
            value: ${SONARQUBE_BUILDBREAKER_INTERVAL}
          - name: SONARQUBE_BUILDBREAKER_THRESHOLD
            value: ${SONARQUBE_BUILDBREAKER_THRESHOLD}
          - name: SONAR_BUILDBREAKER_DISABLE
            value: ${SONAR_BUILDBREAKER_DISABLE}
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 45
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: ${SONARQUBE_SERVICE_NAME}
          ports:
          - containerPort: 9000
            protocol: TCP
          resources:
            limits:
              cpu: ${SONARQUBE_CPU_LIMIT}
              memory: ${SONARQUBE_MEMORY_LIMIT}
            requests:
              cpu: 500m
              memory: "1Gi"
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /opt/sonarqube/data
            name: ${SONARQUBE_SERVICE_NAME}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${SONARQUBE_SERVICE_NAME}
          persistentVolumeClaim:
            claimName: ${SONARQUBE_SERVICE_NAME}-data
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${SONARQUBE_SERVICE_NAME}
        from:
          kind: ImageStreamTag
          name: ${SONARQUBE_SERVICE_NAME}:latest
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${DATABASE_SERVICE_NAME}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: ${DATABASE_SERVICE_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:${POSTGRESQL_VERSION}
          namespace: ${NAMESPACE}
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
  status: {}
parameters:
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: openshift
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: postgresql
- description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: POSTGRESQL_USER
  required: true
- description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: POSTGRESQL_PASSWORD
  required: true
- description: Name of the PostgreSQL database accessed.
  displayName: PostgreSQL Database Name
  name: POSTGRESQL_DATABASE
  required: true
  value: sampledb
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Version of PostgreSQL image to be used (9.2, 9.4, 9.5 or latest).
  displayName: Version of PostgreSQL Image
  name: POSTGRESQL_VERSION
  required: true
  value: "9.5"
- description: Number of virtual CPUs to allocate for SonarQube.
  displayName: SonarQube CPU limit
  name: SONARQUBE_CPU_LIMIT
  required: true
  value: "2"
- description: The maximum amount of memory that the SonarQube application is allowed to use (Min is 512Mi)
  displayName: SonarQube Memory Limit
  name: SONARQUBE_MEMORY_LIMIT
  required: true
  value: 2Gi
- description: The name of the SonarQube Service exposed for the route.
  displayName: SonarQube Service Name
  name: SONARQUBE_SERVICE_NAME
  required: true
  value: sonarqube
- description: SonarQube Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: SonarQube volume capacity
  name: SONARQUBE_VOLUME_CAPACITY
  required: true
  value: 2Gi
- description: Space separated list of plugins (See https://docs.sonarqube.org/display/PLUG/Plugin+Version+Matrix)
  displayName: SonarQube Plugins List
  name: SONAR_PLUGINS_LIST
  value: "findbugs buildbreaker git github gitlab"
- description: Extra startup properties for SonarQube (in the form of "-Dsonar.someProperty=someValue")
  displayName: Extra SonarQube startup properties
  name: SONARQUBE_WEB_JVM_OPTS