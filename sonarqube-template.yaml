apiVersion: template.openshift.io/v1
kind: Template
metadata:
  creationTimestamp: 2018-04-09T10:06:25Z
  labels:
    app: "true"
  name: sonarqube
  namespace: sonarqube-ocp
  resourceVersion: "242828"
  selfLink: /apis/template.openshift.io/v1/namespaces/sonarqube-ocp/templates/sonarqube
  uid: a9f35d12-3bdd-11e8-b621-1299867c4ad8
objects:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: openshift-sonarqube
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${SONARQUBE_VOLUME_CAPACITY}
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  stringData:
    database-password: ${POSTGRESQL_PASSWORD}
    database-user: ${POSTGRESQL_USER}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: ${DATABASE_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_DATABASE
            value: ${POSTGRESQL_DATABASE}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: ${DATABASE_SERVICE_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:${POSTGRESQL_VERSION}
          namespace: ${NAMESPACE}
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      appName: sonarqube
    name: openshift-sonarqube
  spec:
    port:
      targetPort: 9000-tcp
    to:
      kind: Service
      name: openshift-sonarqube
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    generation: 1
    labels:
      app: openshift-sonarqube
      appName: sonarqube
    name: openshift-sonarqube
  spec:
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: openshift-sonarqube:latest
      generation: null
      importPolicy: {}
      name: latest
      referencePolicy:
        type: ""
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations: null
    creationTimestamp: null
    generation: 2
    labels:
      app: sonarqube
      appName: sonarqube
    name: sonarqube
  spec:
    tags:
    - annotations:
        openshift.io/generated-by: OpenShiftWebConsole
        openshift.io/imported-from: sonarqube:latest
      from:
        kind: DockerImage
        name: sonarqube:latest
      generation: 2
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"postgresql","namespace":"","kind":"Service"}]'
    creationTimestamp: null
    labels:
      app: openshift-sonarqube
      appName: sonarqube
    name: openshift-sonarqube
  spec:
    ports:
    - name: 9000-tcp
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      app: openshift-sonarqube
      deploymentconfig: openshift-sonarqube
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: openshift-sonarqube
      appName: sonarqube
    name: openshift-sonarqube
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: openshift-sonarqube:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: ${SONAR_CONTAINER_BRANCH}
        uri: https://github.com/InfoSec812/openshift-sonarqube.git
      type: Git
    strategy:
      dockerStrategy:
        env:
        - name: SONAR_PLUGINS_LIST
          value: ${SONAR_PLUGINS_LIST}
        from:
          kind: ImageStreamTag
          name: sonarqube:latest
      type: Docker
    triggers:
    - github:
        secret: tu5UyJNNhAyxXYrcnDTZ
      type: GitHub
    - generic:
        secret: xhUU0WVDG3eA2Yu89zGe
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: openshift-sonarqube
      appName: sonarqube
      name: openshift-sonarqube
    name: openshift-sonarqube
  spec:
    replicas: 1
    selector:
      app: openshift-sonarqube
      deploymentconfig: openshift-sonarqube
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: openshift-sonarqube
          deploymentconfig: openshift-sonarqube
      spec:
        containers:
        - env:
          - name: SONAR_PLUGIN_LIST
            value: ${SONAR_PLUGIN_LIST}
          - name: SONARQUBE_WEB_JVM_OPTS
            value: ${SONARQUBE_WEB_JVM_OPTS}
          - name: SONARQUBE_JDBC_USERNAME
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DATABASE_SERVICE_NAME}
          - name: SONARQUBE_JDBC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DATABASE_SERVICE_NAME}
          - name: SONARQUBE_JDBC_URL
            value: ${SONARQUBE_JDBC_URL}
          - name: SONARQUBE_LDAP_BINDDN
            value: ${SONARQUBE_LDAP_BINDDN}
          - name: SONARQUBE_LDAP_BINDPASSWD
            value: ${SONARQUBE_LDAP_BINDPASSWD}
          - name: SONARQUBE_LDAP_URL
            value: ${SONARQUBE_LDAP_URL}
          - name: SONARQUBE_LDAP_REALM
            value: ${SONARQUBE_LDAP_REALM}
          - name: SONARQUBE_LDAP_CONTEXTFACTORY
            value: ${SONARQUBE_LDAP_CONTEXTFACTORY}
          - name: SONARQUBE_LDAP_STARTTLS
            value: ${SONARQUBE_LDAP_STARTTLS}
          - name: SONARQUBE_LDAP_AUTHENTICATION
            value: ${SONARQUBE_LDAP_AUTHENTICATION}
          - name: SONARQUBE_LDAP_USER_BASEDN
            value: ${SONARQUBE_LDAP_USER_BASEDN}
          - name: SONARQUBE_LDAP_USER_REQUEST
            value: ${SONARQUBE_LDAP_USER_REQUEST}
          - name: SONARQUBE_LDAP_USER_REAL_NAME_ATTR
            value: ${SONARQUBE_LDAP_USER_REAL_NAME_ATTR}
          - name: SONARQUBE_LDAP_USER_EMAIL_ATTR
            value: ${SONARQUBE_LDAP_USER_EMAIL_ATTR}
          - name: SONARQUBE_LDAP_GROUP_BASEDN
            value: ${SONARQUBE_LDAP_GROUP_BASEDN}
          - name: SONARQUBE_LDAP_GROUP_REQUEST
            value: ${SONARQUBE_LDAP_GROUP_REQUEST}
          - name: SONARQUBE_LDAP_GROUP_ID_ATTR
            value: ${SONARQUBE_LDAP_GROUP_ID_ATTR}
          - name: SONARQUBE_BUILDBREAKER_MAX_ATTEMPTS
            value: ${SONARQUBE_BUILDBREAKER_MAX_ATTEMPTS}
          - name: SONARQUBE_BUILDBREAKER_INTERVAL
            value: ${SONARQUBE_BUILDBREAKER_INTERVAL}
          - name: SONARQUBE_BUILDBREAKER_THRESHOLD
            value: ${SONARQUBE_BUILDBREAKER_THRESHOLD}
          - name: SONAR_BUILDBREAKER_DISABLE
            value: ${SONAR_BUILDBREAKER_DISABLE}
          - name: SONARQUBE_FORCE_AUTHENTICATION
            value: ${SONARQUBE_FORCE_AUTHENTICATION}
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 45
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: openshift-sonarqube
          ports:
          - containerPort: 9000
            protocol: TCP
          resources:
            limits:
              cpu: ${SONARQUBE_CPU_LIMIT}
              memory: ${SONARQUBE_MEMORY_LIMIT}
            requests:
              cpu: 500m
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /opt/sonarqube/data
            name: openshift-sonarqube
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: openshift-sonarqube
          persistentVolumeClaim:
            claimName: openshift-sonarqube
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - openshift-sonarqube
        from:
          kind: ImageStreamTag
          name: openshift-sonarqube:latest
      type: ImageChange
  status: {}
parameters:
- description: Branch from which to build the SonarQube container (https://github.com/rht-labs/openshift-sonarqube)
  displayName: SonarQube Container Branch
  name: SONAR_CONTAINER_BRANCH
  value: master
- description: Maximum amount of memory for the PostgreSQL database
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: openshift
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: postgresql
- description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: POSTGRESQL_USER
  required: true
- description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: POSTGRESQL_PASSWORD
  required: true
- description: Name of the PostgreSQL database accessed.
  displayName: PostgreSQL Database Name
  name: POSTGRESQL_DATABASE
  required: true
  value: sonar
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 5Gi
- description: Version of PostgreSQL image to be used (9.2, 9.4, 9.5 or latest).
  displayName: Version of PostgreSQL Image
  name: POSTGRESQL_VERSION
  required: true
  value: "9.5"
- description: Number of virtual CPUs to allocate for SonarQube
  displayName: SonarQube CPU limit
  name: SONARQUBE_CPU_LIMIT
  value: "2"
- description: The maximum amount of memory that the SonarQube application is allowed
    to use (Min is 512Mi)
  displayName: SonarQube Memory Limit
  name: SONARQUBE_MEMORY_LIMIT
  value: 2Gi
- description: 'Space separated list of plugins (See: https://docs.sonarqube.org/display/PLUG/Plugin+Version+Matrix)'
  displayName: SonarQube Plugins List
  name: SONAR_PLUGINS_LIST
  value: findbugs pmd ldap buildbreaker github gitlab
- description: The size of the Persistent Volume Claim to provision for SonarQube
  displayName: SonarQube volume capacity
  name: SONARQUBE_VOLUME_CAPACITY
  value: 2Gi
- description: Extra startup properties for SonarQube (in the form of "-Dsonar.someProperty=someValue")
  displayName: Extra SonarQube startup properties
  name: SONARQUBE_WEB_JVM_OPTS
- description: Password used for SonarQube database authentication (leave blank to
    use ephemeral database)
  displayName: JDBC URL for connecting to the SonarQube database
  name: SONARQUBE_JDBC_URL
  value: jdbc:postgresql://postgresql:5432/sonar
- description: Bind DN for LDAP authentication (leave blank for local authentication)
  displayName: LDPA bind Distinguished Name
  name: SONARQUBE_LDAP_BINDDN
- description: Bind password for LDAP authentication (leave blank for local authentication)
  displayName: LDAP bind password
  name: SONARQUBE_LDAP_BINDPASSWD
- description: LDAP URL for authentication (leave blank for local authentication)
  displayName: LDAP server URL
  name: SONARQUBE_LDAP_URL
- description: 'A realm defines the namespace from which the authentication entity
    (the value of the Context.SECURITY_PRINCIPAL property) is selected. (See: http://docs.oracle.com/javase/jndi/tutorial/ldap/security/digest.html)'
  displayName: LDAP realm
  name: SONARQUBE_LDAP_REALM
- description: The context factory is a Java class which is used for creating bindings
    to LDAP servers. The default value should work with most LDAP servers.
  displayName: JNDI ContextFactory to be used
  name: SONARQUBE_LDAP_CONTEXTFACTORY
  value: com.sun.jndi.ldap.LdapCtxFactory
- description: Tells the LDAP plugin to use TLS for connections to the LDAP server
  displayName: Enable StartTLS
  name: SONARQUBE_LDAP_STARTTLS
  value: "false"
- description: 'Typical values include: simple | CRAM-MD5 | DIGEST-MD5 | GSSAPI'
  displayName: LDAP authentication method
  name: SONARQUBE_LDAP_AUTHENTICATION
  value: simple
- description: LDAP BaseDN under which to search for user objects
  displayName: LDAP user base Distinguished Name
  name: SONARQUBE_LDAP_USER_BASEDN
- description: A filter definition which will cause the LDAP server to only return
    user objects
  displayName: LDAP user object filter
  name: SONARQUBE_LDAP_USER_REQUEST
  value: (&(objectClass=inetOrgPerson)(uid={login}))
- description: LDAP attribute on the user object which will be used to get the user's
    full name
  displayName: LDAP user's real name atrribute
  name: SONARQUBE_LDAP_USER_REAL_NAME_ATTR
  value: cn
- description: LDAP attribute which holds the user's e-mail address
  displayName: LDAP user e-mail attribute
  name: SONARQUBE_LDAP_USER_EMAIL_ATTR
  value: mail
- description: LDAP BaseDN under which to search for group objects
  displayName: LDAP group base Distinguished Name
  name: SONARQUBE_LDAP_GROUP_BASEDN
- description: A filter definition which will cause the LDAP server to only return
    group objects
  displayName: LDAP group object filter
  name: SONARQUBE_LDAP_GROUP_REQUEST
  value: (&(objectClass=groupOfUniqueNames)(uniqueMember={dn}))
- description: LDAP attribute from the group object which holds the group's ID
  displayName: LDAP group ID attribute
  name: SONARQUBE_LDAP_GROUP_ID_ATTR
  value: cn
- description: Build Breaker plugin - Max number of poll attempts before failing to
    get analysis results
  displayName: Max BuildBreaker attempts
  name: SONARQUBE_BUILDBREAKER_MAX_ATTEMPTS
  value: "30"
- description: Build Breaker plugin - Interval to wait between poll requests to get
    analysis results
  displayName: Poll Interval
  name: SONARQUBE_BUILDBREAKER_INTERVAL
  value: "20000"
- description: Build Breaker plugin - Threshold of an issue at which a build will
    instantly break regardless of all other analysis results
  displayName: Failure threshold
  name: SONARQUBE_BUILDBREAKER_THRESHOLD
  value: CRITICAL
- description: Build Breaker plugin - Disable the build breaker plugin for all builds
  displayName: Disable Build Breaker plugin
  name: SONAR_BUILDBREAKER_DISABLE
  value: "true"
- description: Require authentication for all requests to sonarqube
  displayName: Require Authentication
  name: SONARQUBE_FORCE_AUTHENTICATION
  value: "true"
- description: Generated secret key for GitHub webhooks
  displayName: Secret string for GitHub WebHooks
  from: '[A-Za-z0-9]{36}'
  generate: expression
  name: GITHUB_SECRET
- description: Generated secret key for generic webhooks
  displayName: Secret string for generic WebHooks
  from: '[A-Za-z0-9]{36}'
  generate: expression
  name: GENERIC_SECRET
